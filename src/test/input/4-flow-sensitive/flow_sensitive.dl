// declarations
.input AssignmentFromConst
.input AssignmentFromVar
.input AssignmentFromCall
.input FormalArg
.input FunctionCallInfo
.input ActualConstArg
.input ActualVarArg
.input ReturnConst
.input ActualVarArg
.input ReturnConst
.input ReturnVar

.input UnconditionalJump
.input EqualityToConstJump
.input NotEqualityToConstJump
.input StartNode

.output PointsToAfter
.output CallPointsTo
.output CallGraph
.output ReachedNode
.output Assignment
.output IsReturn
.output Jump

// >> Assignments <<
.decl AssignmentFromConst(var: symbol, const: symbol, method: symbol, node: symbol)
.decl AssignmentFromVar(var1: symbol, var2: symbol, node: symbol)
.decl AssignmentFromCall(var: symbol, call: symbol, node: symbol)

.decl FormalArg(method: symbol, i: symbol, arg: symbol)
.decl FunctionCallInfo(inMethod: symbol, call: symbol, method: symbol, node: symbol)

.decl ActualConstArg(call: symbol, i: symbol, const: symbol)
.decl ActualVarArg(call: symbol, i: symbol, var: symbol)

.decl ReturnConst(method: symbol, const: symbol, node: symbol)
.decl ReturnVar(method: symbol, var: symbol, node: symbol)

.decl StartNode(method: symbol, node: symbol)

.decl UnconditionalJump(from: symbol, to: symbol)
.decl EqualityToConstJump(from: symbol, to: symbol, var: symbol, const: symbol)
.decl NotEqualityToConstJump(from: symbol, to: symbol, var: symbol, const: symbol)

// Output
// После выполнения node
.decl PointsToAfter(var: symbol, const: symbol, ctx: symbol, node: symbol)
.decl PointsToBefore(var: symbol, const: symbol, ctx: symbol, node: symbol)
.decl CallPointsTo(callerMethodCtx: symbol, callerMethod: symbol, call: symbol, const: symbol)

.decl CallGraph(callerMethodCtx: symbol, callerMethod: symbol, call: symbol, method: symbol)
.decl ReachedNode(ctx: symbol, node: symbol)
.decl Assignment(node: symbol, var: symbol)

.decl IsReturn(node: symbol)
.decl Jump(from: symbol, to: symbol)

// Вспомогательные штуки
IsReturn(node) :- ReturnConst(_, _, node); ReturnVar(_, _, node).
Jump(v, to) :-
    UnconditionalJump(v, to);
    EqualityToConstJump(v, to, _, _);
    NotEqualityToConstJump(v, to, _, _).

// I. Прогулка по Control Flow с динамическим построением графа вызовов функций.
ReachedNode("main()", node) :- StartNode("main", node).

ReachedNode(ctx, node) :-
    UnconditionalJump(prev, node),
    ReachedNode(ctx, prev),
    !IsReturn(prev).

CallGraph(callerMethodCtx, callerMethod, call, method) :-
    ReachedNode(callerMethodCtx, node),
    FunctionCallInfo(callerMethod, call, method, node).

// Q: В каком смысле построение динамическое?

ReachedNode(call, node) :-
    CallGraph(_, _, call, method),
    StartNode(method, node).

// II. Базовый PointsToAfter
// 1. Присваивание константе
PointsToAfter(var, const, ctx, node) :-
    ReachedNode(ctx, node),
    AssignmentFromConst(var, const, _, node).

// 2. Проталкивание PointsToAfter по controlFlow
Assignment(node, var) :-
    AssignmentFromConst(var, _, _, node);
    AssignmentFromVar(var, _, node);
    AssignmentFromCall(var, _, node).

PointsToAfter(var, const, ctx, node) :-
    ReachedNode(ctx, node),
    Jump(prev, node),
    PointsToAfter(var, const, ctx, prev),
    !Assignment(node, var).

// 3. Присваивание переменной
PointsToBefore(var, const, ctx, node) :-
    Jump(prev, node),
    PointsToAfter(var, const, ctx, prev).

PointsToAfter(left, const, ctx, node) :-
    ReachedNode(ctx, node),
    AssignmentFromVar(left, right, node),
    PointsToBefore(right, const, ctx, node).

// III. Межпроцедурный PointsToAfter
// 1. Проталкивание аргументов
// Recap: CallGraph => Reached
PointsToAfter(funArg, const, call, node) :-
     CallGraph(_, _, call, method),
     StartNode(method, node),
     ActualConstArg(call, i, const),
     FormalArg(method, i, funArg).

PointsToAfter(funArg, const, call, node) :-
    CallGraph(callerCtx, _, call, method),
    StartNode(method, node),
    FormalArg(method, i, funArg),
    ActualVarArg(call, i, var),
    FunctionCallInfo(_, call, method, callNode),
    PointsToBefore(var, const, callerCtx, callNode).

//// 2. Проталкивание return
CallPointsTo(callerMethodCtx, callerMethod, call, const) :-
    CallGraph(callerMethodCtx, callerMethod, call, method),
    ReachedNode(call, returnNode),
    ReturnConst(method, const, returnNode).

CallPointsTo(callerMethodCtx, callerMethod, call, const) :-
    CallGraph(callerMethodCtx, callerMethod, call, method),
    ReachedNode(call, returnNode),
    ReturnVar(method, var, returnNode),
    PointsToBefore(var, const, call, returnNode).

PointsToAfter(var, const, callerMethodCtx, node) :-
    AssignmentFromCall(var, call, node),
    CallPointsTo(callerMethodCtx, _, call, const).

// IV If/then/else
ReachedNode(ctx, thenBranch) :-
    EqualityToConstJump(cond, thenBranch, var, const),
    PointsToAfter(var, const, ctx, cond).
